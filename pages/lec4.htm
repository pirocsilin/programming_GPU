<!DOCTYPE html>
<html lang="en">

<head>

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="">
  <meta name="author" content="do.sibsutis.ru">

  <title>Лекция 4. Конспект лекций</title>
	
	<link rel="icon" type="image/png" href="../lib/css/favicon.png">
  <!-- Bootstrap Core CSS -->
  <link href="../lib/css/bootstrap.css" rel="stylesheet">
  <link href="../lib/css/prettify.css" rel="stylesheet">	
  <!-- Custom CSS -->
  <link href="../lib/css/scrolling-nav.css" rel="stylesheet">

  <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
  <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
  <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
  <![endif]-->
</head>

<!-- The #page-top ID is part of the scrolling feature - the data-spy and data-target are part of the built-in Bootstrap scrollspy function -->

<body id="page-top" data-spy="scroll" data-target=".navbar-fixed-top">
  <!-- Navigation -->
<nav class="navbar navbar-default navbar-fixed-top">
 <div class="container">
  <!-- Brand and toggle get grouped for better mobile display -->
  <div class="navbar-header">
   <li class="hidden"> <a class="page-scroll" href="#page-top"></a> </li>
	 
	 <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
    <span class="icon-bar"></span>
    <span class="icon-bar"></span>
    <span class="icon-bar"></span>
   </button>
	 
   <a class="navbar-brand " href="../index.htm"> 
  <text class = "hidden-xs">Программирование графических процессоров</text> 
  <text class = "visible-xs">ПГП</text>
	 </a>
  </div>

  <!-- Collect the nav links, forms, and glyphicon glyphicon-list-alt content for toggling -->
  <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
   
	 <!-- <ul class="nav navbar-nav">
		<li><a href="#"></a></li> 
   </ul> -->
	
   <ul class="nav navbar-nav navbar-right">
    <li class="dropdown">
		<button type="button" class="navbar-toggle dropdown-toggle hidden-xs" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
		</button>	   
		<a class = "dropdown-toggle visible-xs" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Материалы</a>
     <ul class="dropdown-menu">
    <li><a href="../index.htm">Аннотация курса</a></li>
      <li role="separator" class="divider"></li>
  
 <li><a href="lec_index.htm">Теория</a></li>
 
<li><a href="labs.htm">Лабораторные работы</a></li>  
 <li><a href="c_work.htm">Контрольная работа</a></li>

 
      <li role="separator" class="divider"></li>
   

      <li><a href="lit.htm">Литература</a></li>
      <!--li><a href="q.htm">Вопросы для самопроверки</a></li-->			
     </ul>
 </li>
 </ul>
  </div><!-- /.navbar-collapse -->
 </div><!-- /.container-fluid -->
</nav>


  <div id="intro" class="section content-section ">
    <div class="container">
       <div class="row">
        <div class="col-lg-12">	


<!-- содержание -->	
<div class="page-header">				
<h3><a href="#">4. Алгоритм сложения двух векторов на GPU</a></h3>

<a href="#1" class=punkt>Контрольные вопросы

</a><br>

</div>
<!--начало-->
<p>Общая схема распараллеливания задач для вычислений на GPU ничем не отличается от распараллеливания задач для вычислений с использованием MPI - нужно разбить исходную задачу на множество подзадач, результат решения которых не зависит от результата друг друга. Простейшим примером такой задачи является алгоритм сложения двух векторов.</p>
<p><img src="img/img006.jpg"></p>
<p>Рис. 6 – обобщённая схема сложения двух векторов</p>
<br>
<p>Последовательная версия алгоритма сложения двух векторов:</p>
<pre class="prettyprint">
#include &lt;stdlib.h&gt;
#define N 100000

int main () {
	int *a = (int*)malloc(sizeof(int) * N);
	int *b = (int*)malloc(sizeof(int) * N);
	int *c = (int*)malloc(sizeof(int) * N);

	for(int i = 0; i < N; ++i) {
		a[i] = 1;
		b[i] = 1;
	}
	
	for(int i = 0; i < N; ++i) {
		c[i] = a[i] + b[i];
	}
	return 0;

}
</Pre>
<p><img src="img/img007.jpg"></p>
<p>Рис. 7 – последовательная схема вычисления суммы двух векторов</p>
<br>
<p>Проанализировав последовательный алгоритм можно увидеть, что вычисление каждого элемента c[i] не зависит от других значений вектора c. Исходя из этого можно сделать вывод, что вычислять значения c[i] можно параллельно. Т.е. нужно сделать так чтобы каждое значение c[i] вычислялось в отдельной нити.</p>
<p><img src="img/img008.jpg"></p>
<p>Рис. 8 – параллельная схема сложения двух векторов</p>
<br>
<p>Для того чтобы дать указание какой-либо конкретной нити, нужно знать её номер. Для этого в CUDA API есть встроенные переменные threadIdx, blockIdx, blockDim, gridDim. Они представляют собой структуры с тремя целочисленными полями x, y, z - измерения индексации. threadIdx – номер нити внутри блока. blockIdx – номер блока внутри сетки. blockDim – размер блока. gridDim – размер сетки. </p>
<p><img src="img/img009.jpg"></p>
<p>Рис. 9 – схема обращения нитей блоков к элементам вектора</p>
<br>
<p>Вычислить глобальный номер нити в сетке можно получить, умножив номер блока на размер блока и прибавив к результату номер нити в блоке – threadIdx.x + blockIdx.x * blockDim.x (пример для одномерной индексации нитей и блоков). Глобальный номер нити можно использовать в качестве индекса векторов, т.е. нить с определённым номером будет обращаться к элементам векторов под этим же номером. Сложив элементы векторов, к которым есть доступ у нити получится один элемент результирующего вектора. После того как все нити закончат свои вычисления, будут вычислены все значения результирующего вектора.</p>
<p><img src="img/img010.jpg"></p>
<p>Рис. 10 – Схема преобразования номеров нитей блоков в глобальные номера нитей (M – размер блока)</p>
<br>
<p>Кроме самого алгоритма нужно выполнить копирование данных с хоста на устройство для проведения вычислений и с устройства на хост результата вычислений для дальнейшей обработки. Для этого в CUDA API есть следующие функции:</p>
<p>__host__  __device__ cudaError_t cudaMalloc ( void** devPtr, size_t size ) – выделяет память на устройстве, где параметр devPtr – указатель куда будет помещён адрес выделенной памяти, size – размер выделяемой памяти в байтах. Функция может вызываться на хосте и из функций-ядер. </p>
<p> __host__ cudaError_t cudaMemcpy ( void* dst, const void* src, size_t count, cudaMemcpyKind kind ) – копирует данные между хостом и устройством. Параметр dst – адрес получателя данных, src – адрес источника данных, count – размер данных в байтах, kind – направление копирования, может принимать значения cudaMemcpyHostToHost (направление Host->Host), cudaMemcpyHostToDevice (Host->Device), cudaMemcpyDeviceToHost (Device->Host), cudaMemcpyDeviceToDevice (Device->Device), cudaMemcpyDefault – направление зависит от того, где выделена память источника и память получателя (требуется поддержка UVA). </p>
<p>__host__  __device__ cudaError_t cudaFree ( void* devPtr ) – высвобождает память выделенную на устройстве. Параметр devPtr – адрес высвобождаемой памяти.</p>
<p>Т.е. общая схема вычислений выглядит следующим образом:</p>
<p><img src="img/img011.jpg"></p>
<p>Рис. 11 – копирование данных на устройство</p>
<p><img src="img/img012.jpg"></p>
<p>Рис. 12 – вычисления на устройстве</p>
<p><img src="img/img013.jpg"></p>
<p>Рис. 13 – копирование результата на хост</p>
<br>
<p>Параллельная версия алгоритма сложения двух векторов:</p>
<pre class="prettyprint">
#include &lt;stdlib.h&gt;
#define N 100000

__global__ void kernel (int *a, int *b, int *c) {
	int i = threadIdx.x + blockIdx.x * blockDim.x;
	if(i < N) {
		c[i] = a[i] + b[i];
	}

}

int main () {
	//Выделение памяти на хосте
	int *ha = (int*)malloc(sizeof(int) * N);
	int *hb = (int*)malloc(sizeof(int) * N);
	int *hc = (int*)malloc(sizeof(int) * N);

	for(int i = 0; i < N; ++i) {
		a[i] = 1;
		b[i] = 1;
	}
	
	int *dc;
	int *da;
	int* db;
	
	//Выделение памяти на устройстве
	cudaMalloc((void**) &da, sizeof(int) * N);
	cudaMalloc((void**) &db, sizeof(int) * N);
	cudaMalloc((void**) &dc, sizeof(int) * N);
	
	//Копирование исходных данных с хоста на устройство
	cudaMemcpy(da, ha, sizeof(int) * N, cudaMemcpyHostToDevice);
	cudaMemcpy(db, hb, sizeof(int) * N, cudaMemcpyHostToDevice);
	
	//Выставляем размер блока = 128 нитей
	int blockSize = 128;
	//Динамически высчитываем сколько блоков понадобится для вычислений
	int gridSize = N / blockSize + 1;
	
	kernel<<<gridSize, blockSize>>>(ad, db, dc);
	cudaDeviceSynchronize();
	
	//Копирование результата с устройства на хост
	cudaMemcpy(hc, dc, sizeof(int) * N, cudaMemcpyDeviceToHost);
	
	//Осовбождение памяти выделенной на устройстве
	cudaFree(da);
	cudaFree(db);
	cudaFree(dc);
	
	return 0;

}
</Pre>
<a name=1 class="anchor"></a>
<h3>Контрольные вопросы</h3>
<p>1.	Что такое нить, блок, сетка блоков, варп, функция-ядро?
<p>2.	Что такое хост и устройство?
<p>3.	Как запустить функцию-ядро?
<p>4.	Как выделить память на устройстве?
<p>5.	Как скопировать данные на устройство с хоста? с устройства на хост?
<p>6.	Как выглядит общая схема вычислений с использованием GPU?
<p>7.	Как вычислить глобальный номер нити?
<p>8.	Реализуйте параллельный и последовательный варианты алгоритма приведения символов к одному регистру (верхний или нижний).
<p>9.	Проверьте реализованные алгоритмы на строках с длинами от 2^10 до 2^23.
</p>

<br><br>
<!--конец-->
      
				


				</div>
			</div>
			
      </div>
    </div>
  </div>
	
	<!--Меню навигации по Темам -->	
	<div aria-label="..." class = "nav-menu">
	 <ul class="pager background-transition-slow">
		 <li title="Наверх" style = "margin-right:15px;	"><a class = "glyphicon glyphicon-menu-up page-scroll" href="#page-top"></a></li>
		 <li title="К предыдущей лекции"><a class = "glyphicon glyphicon-menu-left page-scroll" href="lec3.htm"></a></li>
		 <li title="В содержание"><a class = "glyphicon glyphicon-list-alt" href="lec_index.htm"></a></li>
		 <li title="К следующей лекции"><a class = "glyphicon glyphicon-menu-right page-scroll" href="lec5.htm"></a></li>
	 </ul>
	</div>
	<!---->
	
	</div>
  <!-- jQuery -->
  <script src="../lib/js/jquery.js"></script>

<script src="../lib/css/prettify.js"></script>
<script type="text/javascript">
  !function ($) {
$(function(){
window.prettyPrint && prettyPrint()  
    })
  }(window.jQuery)
</script>

  <!-- Bootstrap Core JavaScript -->
  <script src="../lib/js/bootstrap.min.js"></script>

  <!-- Scrolling Nav JavaScript -->
  <script src="../lib/js/jquery.easing.min.js"></script>
  <script src="../lib/js/scrolling-nav.js"></script>

</body>

</html>
