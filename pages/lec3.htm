<!DOCTYPE html>
<html lang="en">

<head>

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="">
  <meta name="author" content="do.sibsutis.ru">

  <title>Лекция 3. Конспект лекций</title>
	
	<link rel="icon" type="image/png" href="../lib/css/favicon.png">
  <!-- Bootstrap Core CSS -->
  <link href="../lib/css/bootstrap.css" rel="stylesheet">
  <link href="../lib/css/prettify.css" rel="stylesheet">	
  <!-- Custom CSS -->
  <link href="../lib/css/scrolling-nav.css" rel="stylesheet">

  <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
  <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
  <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
  <![endif]-->
</head>

<!-- The #page-top ID is part of the scrolling feature - the data-spy and data-target are part of the built-in Bootstrap scrollspy function -->

<body id="page-top" data-spy="scroll" data-target=".navbar-fixed-top">
  <!-- Navigation -->
<nav class="navbar navbar-default navbar-fixed-top">
 <div class="container">
  <!-- Brand and toggle get grouped for better mobile display -->
  <div class="navbar-header">
   <li class="hidden"> <a class="page-scroll" href="#page-top"></a> </li>
	 
	 <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
    <span class="icon-bar"></span>
    <span class="icon-bar"></span>
    <span class="icon-bar"></span>
   </button>
	 
   <a class="navbar-brand " href="../index.htm"> 
  <text class = "hidden-xs">Программирование графических процессоров</text> 
  <text class = "visible-xs">ПГП</text>
	 </a>
  </div>

  <!-- Collect the nav links, forms, and glyphicon glyphicon-list-alt content for toggling -->
  <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
   
	 <!-- <ul class="nav navbar-nav">
		<li><a href="#"></a></li> 
   </ul> -->
	
   <ul class="nav navbar-nav navbar-right">
    <li class="dropdown">
		<button type="button" class="navbar-toggle dropdown-toggle hidden-xs" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
		</button>	   
		<a class = "dropdown-toggle visible-xs" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Материалы</a>
     <ul class="dropdown-menu">
    <li><a href="../index.htm">Аннотация курса</a></li>
      <li role="separator" class="divider"></li>
  
 <li><a href="lec_index.htm">Теория</a></li>
 
<li><a href="labs.htm">Лабораторные работы</a></li>  
 <li><a href="c_work.htm">Контрольная работа</a></li>

 
      <li role="separator" class="divider"></li>
   

      <li><a href="lit.htm">Литература</a></li>
      <!--li><a href="q.htm">Вопросы для самопроверки</a></li-->			
     </ul>
 </li>
 </ul>
  </div><!-- /.navbar-collapse -->
 </div><!-- /.container-fluid -->
</nav>


  <div id="intro" class="section content-section ">
    <div class="container">
       <div class="row">
        <div class="col-lg-12">	


<!-- содержание -->	
<div class="page-header">				
<h3><a href="#">3. Первая программа на CUDA C</a></h3>

</div>
<!--начало-->
<p>Для создания приложений с использованием технологии CUDA потребуется видеокарта NVIDIA, драйвер для видеокарты, набор инструментов разработчика NVIDIA CUDA Tollkit, компилятор языка программирования C, текстовый редактор. Программы с использованием технологии CUDA пишутся в файлах с расширением .cu. Для компиляции используется утилита nvcc. Она компилирует части кода, которые относятся к CUDA API, а остальное отдаёт стандартному компилятору, после чего собирает откомпилированный код в один исполняемый файл.</p>
<p>Пример программы на CUDA C.</p>
<p>hello_world.cu:</p>
<pre class="prettyprint">
#include &lt;stdio.h&gt;
__global__ void kernel () {
	printf("Hello, World!");
}

int main () {
	kernel<<<1,1>>>();
	cudaDeviceSynchronize();
	return 0;
}
</Pre>
<p>Компиляция:</p>
<p class=punkt>nvcc hello_world.cu -o hello_world</p>
<p>Запуск:</p>
<p class=punkt>./hello_world</p>
<p>Вывод:</p>
<p class=punkt>Hello, World
</p>
<p>Функция kernel, которая определена в примере называется функция-ядро. Это функция инструкции которой будут выполняться на GPU. Её определения синтаксически не отличается от обычной функции языка программирования C за исключением одного – спецификатора __global__. Именно этот спецификатор указывает на то, что эта функция должна быть скомпилирована для работы на GPU, а не на CPU. Ещё он говорит о том, что функция может быть вызвана из последовательной части кода.</p>
<p>В терминах CUDA API место исполнения параллельного кода называется устройством (device), а место исполнения последовательного кода называется – хост (host). Т.е. функция kernel исполняется на устройстве, но может вызываться на хосте. Помимо спецификатора __global__ существуют спецификаторы __device__ и __host__. Функции помеченные спецификатором __device__ могут исполняться на устройстве и вызываться должны на устройстве, т.е. только из других функций-ядер. Спецификатор __host__ говорит о том, что функция будет исполняться на хосте и вызываться она может только на хосте. Функции помеченные спецификатором __global__ могут вызываться как на хосте так и на устройстве.</p>
<p>Для того чтобы вызвать функцию-ядро, в тройных угловых скобках нужно указать два обязательных параметра, которые показывают сколько всего нитей будет исполнять функцию-ядро. Первый параметр – размер сетки блоков, второй параметр – количество нитей в блоке. Блок является логическим представлением мультипроцессора. В блоке исполняются нити, все нити делятся по варпам, каждый блок привязан к одному мультипроцессору, не может его менять и использует ресурсы мультипроцессора к которому привязан. Максимальный размер блока равен 1024 нити. Т.е. блок – группа нитей (не более 1024), использующих ресурсы конкретного физического мультипроцессора. Сетка блоков – логическое представление кластера мультипроцессоров, блоки никак друг от друга не зависят. Максимальное количество блоков намного больше чем количество мультипроцессоров на GPU. Каждый мультипроцессор одновременно может обрабатывать больше одного блока. Если мультипроцессоров не хватает для обработки всех блоков, блоки выстраиваются в очередь и ждут пока какой нибудь мультипроцессор освободится.</p>
<p>В примере функция-ядро запускается на одном блоке, который состоит из одной нити. Если вызывать её с параметрами <<<2,3>>>, функция-ядро выполнится 6 раз - отработают два блока по три нити, и строка "Hello, World" выведется 6 раз.</p>
<p>Функция cudaDeviceSynchronize – функция синхронизации. Код исполняющийся на GPU и CPU исполняется асинхронно, т.е. после вызова функции-ядра на хосте центральный процессор продолжает исполнять последовательный код не ожидая завершения вычислений на GPU. Чтобы синхронизировать вычисления производящиеся на GPU и CPU используется функция cudaDeviceSynchronize(). В точке вызова этой функции CPU будет ожидать пока закончатся все вычисления запущенные на GPU.</p>
<p>Блоки внутри сетки блоков и нити внутри блока могут индексироваться по одному, двум или трём измерениям. Т.е. при запуске функции ядра указывается не общий размер блока и сетки блоков, а размер каждого измерения. В примере выше индексация происходит по одному измерению (размеры второго и третьего неявно установлены в 1). Обобщённый синтаксис функции-ядра выглядит следующим образом kernel<<<dim3 gridDim, dim3 blockDim>>> (param). dim3 - тип данных введённый в CUDA, который представляет собой вектор из трёх целочисленных значений. Вызов функции-ядра из примера kernel<<<1,1>>>() или kernel<<<2,3>>>() аналогичен вызовам kernel<<<dim3(1,1,1), dim3(1,1,1)>>>() и kernel<<<dim3(2,1,1), dim3(3,1,1)>>>() соответственно. На рисунках 4 и 5 показаны примеры представления различных способов индексации нитей и блоков. </p>
<p>Введение такого синтаксиса руководствуется исключительно соображениями удобства написания кода и ничем больше.</p>
<p><img src="img/img004.jpg"></p>
<p>Рис. 4 – пример одномерной индексации нитей и блоков</p>
<p><img src="img/img005.jpg"></p>
<p>Рис. 5 – пример двумерной индексации нитей и блоков</p>

<br><br>
<!--конец-->
      
				


				</div>
			</div>
			
      </div>
    </div>
  </div>
	
	<!--Меню навигации по Темам -->	
	<div aria-label="..." class = "nav-menu">
	 <ul class="pager background-transition-slow">
		 <li title="Наверх" style = "margin-right:15px;	"><a class = "glyphicon glyphicon-menu-up page-scroll" href="#page-top"></a></li>
		 <li title="К предыдущей лекции"><a class = "glyphicon glyphicon-menu-left page-scroll" href="lec2.htm"></a></li>
		 <li title="В содержание"><a class = "glyphicon glyphicon-list-alt" href="lec_index.htm"></a></li>
		 <li title="К следующей лекции"><a class = "glyphicon glyphicon-menu-right page-scroll" href="lec4.htm"></a></li>
	 </ul>
	</div>
	<!---->
	
	</div>
  <!-- jQuery -->
  <script src="../lib/js/jquery.js"></script>

<script src="../lib/css/prettify.js"></script>
<script type="text/javascript">
  !function ($) {
$(function(){
window.prettyPrint && prettyPrint()  
    })
  }(window.jQuery)
</script>

  <!-- Bootstrap Core JavaScript -->
  <script src="../lib/js/bootstrap.min.js"></script>

  <!-- Scrolling Nav JavaScript -->
  <script src="../lib/js/jquery.easing.min.js"></script>
  <script src="../lib/js/scrolling-nav.js"></script>

</body>

</html>
